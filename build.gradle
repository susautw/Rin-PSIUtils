buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

version = mod_version
group = domain + "." + mod_id // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version="${project.mc_version}-${project.forge_version}"
    runDir = "run"
    mappings "stable_39"

    def replacement=[
            "mod_name", "mod_version", "mod_id", "author", "mc_version", "jei_version", "psi_version",
            "forge_version"
    ]
    for (String key: replacement){
        replace '${'+key+'}', project.getProperties().get(key)
    }


    if(project.hasProperty("mc_uuid"))
        clientRunArgs += ["--uuid", project.mc_uuid]

    if(project.hasProperty("mc_username"))
        clientRunArgs += ["--username", project.mc_username]
    serverRunArgs += ["nogui"]
}

repositories {
    mavenCentral()
    maven {
        url = "https://www.cursemaven.com"
    }
    maven { url = "http://dvs1.progwml6.com/files/maven" }
    maven { url = "http://maven.bluexin.be/repository/snapshots/" }
    maven { url = "http://maven.covers1624.net" }
    maven { url = "http://maven.thiakil.com" }
    maven { url = "https://maven.blamejared.com/" }

}

dependencies {
    compileOnly "vazkii.autoreglib:AutoRegLib:${project.arl_version}"
    deobfProvided "curse.maven:psi:${project.psi_file_version}"
    compileOnly "mezz.jei:jei_${project.mc_version}:${project.jei_version}"

    compile  "org.reflections:reflections:0.9.12"
    compile  "org.jetbrains:annotations:13.0"
    testImplementation 'junit:junit:4.13'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        def attrs = [
            "Specification-Title": project.mod_name,
            "Specification-Vendor": project.author,
            "Specification-Version": project.mod_version, // We are version 1 of ourselves
            "Implementation-Title": project.mod_name,
            "Implementation-Version": project.mod_version,
            "Implementation-Vendor" :project.author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ]

        for(String key: attrs.keySet()){
            attributes key: attrs.get(key)
        }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

processResources {
    inputs.property "mod_name", project.mod_name
    inputs.property "mod_version", project.mod_version
    inputs.property "mod_id", project.mod_id
    inputs.property "domain", project.domain
    inputs.property "author", project.author
    inputs.property "mc_version", project.mc_version
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info",
                "pack.mcmeta"

        expand "version": project.version,
                "mc_version": project.mc_version,
                "mod_id": project.mod_id,
                "mod_name": project.mod_name,
                "author": project.author
    }
}

